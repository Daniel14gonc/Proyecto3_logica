Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    PUNCTUATION

Grammar

Rule 0     S' -> expr
Rule 1     expr -> NEGATION expr
Rule 2     expr -> expr AND expr
Rule 3     expr -> expr OR expr
Rule 4     expr -> expr IMPLICATION expr
Rule 5     expr -> expr DOUBLEIMPLICATION expr
Rule 6     expr -> PROPOSITION
Rule 7     expr -> CONSTANTS
Rule 8     expr -> LPAREN expr RPAREN

Terminals, with rules where they appear

AND                  : 2
CONSTANTS            : 7
DOUBLEIMPLICATION    : 5
IMPLICATION          : 4
LPAREN               : 8
NEGATION             : 1
OR                   : 3
PROPOSITION          : 6
PUNCTUATION          : 
RPAREN               : 8
error                : 

Nonterminals, with rules where they appear

expr                 : 1 2 2 3 3 4 4 5 5 8 0

Parsing method: LALR

state 0

    (0) S' -> . expr
    (1) expr -> . NEGATION expr
    (2) expr -> . expr AND expr
    (3) expr -> . expr OR expr
    (4) expr -> . expr IMPLICATION expr
    (5) expr -> . expr DOUBLEIMPLICATION expr
    (6) expr -> . PROPOSITION
    (7) expr -> . CONSTANTS
    (8) expr -> . LPAREN expr RPAREN

    NEGATION        shift and go to state 2
    PROPOSITION     shift and go to state 3
    CONSTANTS       shift and go to state 4
    LPAREN          shift and go to state 5

    expr                           shift and go to state 1

state 1

    (0) S' -> expr .
    (2) expr -> expr . AND expr
    (3) expr -> expr . OR expr
    (4) expr -> expr . IMPLICATION expr
    (5) expr -> expr . DOUBLEIMPLICATION expr

    AND             shift and go to state 6
    OR              shift and go to state 7
    IMPLICATION     shift and go to state 8
    DOUBLEIMPLICATION shift and go to state 9


state 2

    (1) expr -> NEGATION . expr
    (1) expr -> . NEGATION expr
    (2) expr -> . expr AND expr
    (3) expr -> . expr OR expr
    (4) expr -> . expr IMPLICATION expr
    (5) expr -> . expr DOUBLEIMPLICATION expr
    (6) expr -> . PROPOSITION
    (7) expr -> . CONSTANTS
    (8) expr -> . LPAREN expr RPAREN

    NEGATION        shift and go to state 2
    PROPOSITION     shift and go to state 3
    CONSTANTS       shift and go to state 4
    LPAREN          shift and go to state 5

    expr                           shift and go to state 10

state 3

    (6) expr -> PROPOSITION .

    AND             reduce using rule 6 (expr -> PROPOSITION .)
    OR              reduce using rule 6 (expr -> PROPOSITION .)
    IMPLICATION     reduce using rule 6 (expr -> PROPOSITION .)
    DOUBLEIMPLICATION reduce using rule 6 (expr -> PROPOSITION .)
    $end            reduce using rule 6 (expr -> PROPOSITION .)
    RPAREN          reduce using rule 6 (expr -> PROPOSITION .)


state 4

    (7) expr -> CONSTANTS .

    AND             reduce using rule 7 (expr -> CONSTANTS .)
    OR              reduce using rule 7 (expr -> CONSTANTS .)
    IMPLICATION     reduce using rule 7 (expr -> CONSTANTS .)
    DOUBLEIMPLICATION reduce using rule 7 (expr -> CONSTANTS .)
    $end            reduce using rule 7 (expr -> CONSTANTS .)
    RPAREN          reduce using rule 7 (expr -> CONSTANTS .)


state 5

    (8) expr -> LPAREN . expr RPAREN
    (1) expr -> . NEGATION expr
    (2) expr -> . expr AND expr
    (3) expr -> . expr OR expr
    (4) expr -> . expr IMPLICATION expr
    (5) expr -> . expr DOUBLEIMPLICATION expr
    (6) expr -> . PROPOSITION
    (7) expr -> . CONSTANTS
    (8) expr -> . LPAREN expr RPAREN

    NEGATION        shift and go to state 2
    PROPOSITION     shift and go to state 3
    CONSTANTS       shift and go to state 4
    LPAREN          shift and go to state 5

    expr                           shift and go to state 11

state 6

    (2) expr -> expr AND . expr
    (1) expr -> . NEGATION expr
    (2) expr -> . expr AND expr
    (3) expr -> . expr OR expr
    (4) expr -> . expr IMPLICATION expr
    (5) expr -> . expr DOUBLEIMPLICATION expr
    (6) expr -> . PROPOSITION
    (7) expr -> . CONSTANTS
    (8) expr -> . LPAREN expr RPAREN

    NEGATION        shift and go to state 2
    PROPOSITION     shift and go to state 3
    CONSTANTS       shift and go to state 4
    LPAREN          shift and go to state 5

    expr                           shift and go to state 12

state 7

    (3) expr -> expr OR . expr
    (1) expr -> . NEGATION expr
    (2) expr -> . expr AND expr
    (3) expr -> . expr OR expr
    (4) expr -> . expr IMPLICATION expr
    (5) expr -> . expr DOUBLEIMPLICATION expr
    (6) expr -> . PROPOSITION
    (7) expr -> . CONSTANTS
    (8) expr -> . LPAREN expr RPAREN

    NEGATION        shift and go to state 2
    PROPOSITION     shift and go to state 3
    CONSTANTS       shift and go to state 4
    LPAREN          shift and go to state 5

    expr                           shift and go to state 13

state 8

    (4) expr -> expr IMPLICATION . expr
    (1) expr -> . NEGATION expr
    (2) expr -> . expr AND expr
    (3) expr -> . expr OR expr
    (4) expr -> . expr IMPLICATION expr
    (5) expr -> . expr DOUBLEIMPLICATION expr
    (6) expr -> . PROPOSITION
    (7) expr -> . CONSTANTS
    (8) expr -> . LPAREN expr RPAREN

    NEGATION        shift and go to state 2
    PROPOSITION     shift and go to state 3
    CONSTANTS       shift and go to state 4
    LPAREN          shift and go to state 5

    expr                           shift and go to state 14

state 9

    (5) expr -> expr DOUBLEIMPLICATION . expr
    (1) expr -> . NEGATION expr
    (2) expr -> . expr AND expr
    (3) expr -> . expr OR expr
    (4) expr -> . expr IMPLICATION expr
    (5) expr -> . expr DOUBLEIMPLICATION expr
    (6) expr -> . PROPOSITION
    (7) expr -> . CONSTANTS
    (8) expr -> . LPAREN expr RPAREN

    NEGATION        shift and go to state 2
    PROPOSITION     shift and go to state 3
    CONSTANTS       shift and go to state 4
    LPAREN          shift and go to state 5

    expr                           shift and go to state 15

state 10

    (1) expr -> NEGATION expr .
    (2) expr -> expr . AND expr
    (3) expr -> expr . OR expr
    (4) expr -> expr . IMPLICATION expr
    (5) expr -> expr . DOUBLEIMPLICATION expr

    AND             reduce using rule 1 (expr -> NEGATION expr .)
    OR              reduce using rule 1 (expr -> NEGATION expr .)
    IMPLICATION     reduce using rule 1 (expr -> NEGATION expr .)
    DOUBLEIMPLICATION reduce using rule 1 (expr -> NEGATION expr .)
    $end            reduce using rule 1 (expr -> NEGATION expr .)
    RPAREN          reduce using rule 1 (expr -> NEGATION expr .)

  ! AND             [ shift and go to state 6 ]
  ! OR              [ shift and go to state 7 ]
  ! IMPLICATION     [ shift and go to state 8 ]
  ! DOUBLEIMPLICATION [ shift and go to state 9 ]


state 11

    (8) expr -> LPAREN expr . RPAREN
    (2) expr -> expr . AND expr
    (3) expr -> expr . OR expr
    (4) expr -> expr . IMPLICATION expr
    (5) expr -> expr . DOUBLEIMPLICATION expr

    RPAREN          shift and go to state 16
    AND             shift and go to state 6
    OR              shift and go to state 7
    IMPLICATION     shift and go to state 8
    DOUBLEIMPLICATION shift and go to state 9


state 12

    (2) expr -> expr AND expr .
    (2) expr -> expr . AND expr
    (3) expr -> expr . OR expr
    (4) expr -> expr . IMPLICATION expr
    (5) expr -> expr . DOUBLEIMPLICATION expr

    AND             reduce using rule 2 (expr -> expr AND expr .)
    OR              reduce using rule 2 (expr -> expr AND expr .)
    IMPLICATION     reduce using rule 2 (expr -> expr AND expr .)
    DOUBLEIMPLICATION reduce using rule 2 (expr -> expr AND expr .)
    $end            reduce using rule 2 (expr -> expr AND expr .)
    RPAREN          reduce using rule 2 (expr -> expr AND expr .)

  ! AND             [ shift and go to state 6 ]
  ! OR              [ shift and go to state 7 ]
  ! IMPLICATION     [ shift and go to state 8 ]
  ! DOUBLEIMPLICATION [ shift and go to state 9 ]


state 13

    (3) expr -> expr OR expr .
    (2) expr -> expr . AND expr
    (3) expr -> expr . OR expr
    (4) expr -> expr . IMPLICATION expr
    (5) expr -> expr . DOUBLEIMPLICATION expr

    AND             reduce using rule 3 (expr -> expr OR expr .)
    OR              reduce using rule 3 (expr -> expr OR expr .)
    IMPLICATION     reduce using rule 3 (expr -> expr OR expr .)
    DOUBLEIMPLICATION reduce using rule 3 (expr -> expr OR expr .)
    $end            reduce using rule 3 (expr -> expr OR expr .)
    RPAREN          reduce using rule 3 (expr -> expr OR expr .)

  ! AND             [ shift and go to state 6 ]
  ! OR              [ shift and go to state 7 ]
  ! IMPLICATION     [ shift and go to state 8 ]
  ! DOUBLEIMPLICATION [ shift and go to state 9 ]


state 14

    (4) expr -> expr IMPLICATION expr .
    (2) expr -> expr . AND expr
    (3) expr -> expr . OR expr
    (4) expr -> expr . IMPLICATION expr
    (5) expr -> expr . DOUBLEIMPLICATION expr

    IMPLICATION     reduce using rule 4 (expr -> expr IMPLICATION expr .)
    DOUBLEIMPLICATION reduce using rule 4 (expr -> expr IMPLICATION expr .)
    $end            reduce using rule 4 (expr -> expr IMPLICATION expr .)
    RPAREN          reduce using rule 4 (expr -> expr IMPLICATION expr .)
    AND             shift and go to state 6
    OR              shift and go to state 7

  ! AND             [ reduce using rule 4 (expr -> expr IMPLICATION expr .) ]
  ! OR              [ reduce using rule 4 (expr -> expr IMPLICATION expr .) ]
  ! IMPLICATION     [ shift and go to state 8 ]
  ! DOUBLEIMPLICATION [ shift and go to state 9 ]


state 15

    (5) expr -> expr DOUBLEIMPLICATION expr .
    (2) expr -> expr . AND expr
    (3) expr -> expr . OR expr
    (4) expr -> expr . IMPLICATION expr
    (5) expr -> expr . DOUBLEIMPLICATION expr

    IMPLICATION     reduce using rule 5 (expr -> expr DOUBLEIMPLICATION expr .)
    DOUBLEIMPLICATION reduce using rule 5 (expr -> expr DOUBLEIMPLICATION expr .)
    $end            reduce using rule 5 (expr -> expr DOUBLEIMPLICATION expr .)
    RPAREN          reduce using rule 5 (expr -> expr DOUBLEIMPLICATION expr .)
    AND             shift and go to state 6
    OR              shift and go to state 7

  ! AND             [ reduce using rule 5 (expr -> expr DOUBLEIMPLICATION expr .) ]
  ! OR              [ reduce using rule 5 (expr -> expr DOUBLEIMPLICATION expr .) ]
  ! IMPLICATION     [ shift and go to state 8 ]
  ! DOUBLEIMPLICATION [ shift and go to state 9 ]


state 16

    (8) expr -> LPAREN expr RPAREN .

    AND             reduce using rule 8 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 8 (expr -> LPAREN expr RPAREN .)
    IMPLICATION     reduce using rule 8 (expr -> LPAREN expr RPAREN .)
    DOUBLEIMPLICATION reduce using rule 8 (expr -> LPAREN expr RPAREN .)
    $end            reduce using rule 8 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 8 (expr -> LPAREN expr RPAREN .)

